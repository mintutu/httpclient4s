akka.http {
    client {
      # The default value of the `User-Agent` header to produce if no
      # explicit `User-Agent`-header was included in a request.
      # If this value is the empty string and no header was included in
      # the request, no `User-Agent` header will be rendered at all.
      user-agent-header = akka-http/${akka.version}
      # The time period within which the TCP connecting process must be completed.
      connecting-timeout = 10s
      # The time after which an idle connection will be automatically closed.
      # Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 5 s
      # The initial size of the buffer to render the request headers in.
      # Can be used for fine-tuning request rendering performance but probably
      # doesn't have to be fiddled with in most applications.
      request-header-size-hint = 512
      # Socket options to set for the listening socket. If a setting is left
      # undefined, it will use whatever the default on the system is.
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = undefined
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      # Enables/disables the logging of unencrypted HTTP traffic to and from the HTTP
      # server for debugging reasons.
      #
      # Note: Use with care. Logging of unencrypted data traffic may expose secret data.
      #
      # Incoming and outgoing traffic will be logged in hexdump format. To enable logging,
      # specify the number of bytes to log per chunk of data (the actual chunking depends
      # on implementation details and networking conditions and should be treated as
      # arbitrary).
      #
      # For logging on the client side, see akka.http.client.log-unencrypted-network-bytes.
      #
      # `off` : no log messages are produced
      # Int   : determines how many bytes should be logged per data chunk
      log-unencrypted-network-bytes = off
    }
    host-connection-pool {
      client {
        # The time after which an idle connection will be automatically closed.
        # Set to `infinite` to completely disable idle timeouts.
        idle-timeout = 5 s
        parsing {
        }
      }
      max-connections = 8
      max-open-requests = 64
      # The time after which an idle connection pool (without pending requests)
      # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
      idle-timeout = 5 s
      # The maximum number of times failed requests are attempted again,
      # (if the request can be safely retried) before giving up and returning an error.
      # Set to zero to completely disable request retries.
      max-retries = 0
      min-connections = 0
      pipelining-limit = 1
    }
    # Modify to tweak default parsing settings.
    #
    # IMPORTANT:
    # Please note that this sections settings can be overriden by the corresponding settings in:
    # `akka.http.server.parsing`, `akka.http.client.parsing` or `akka.http.host-connection-pool.client.parsing`.
    parsing {
      # The limits for the various parts of the HTTP message parser.
      max-uri-length = 2k
      max-method-length = 16
      max-response-reason-length = 64
      max-header-name-length = 64
      max-header-value-length = 8k
      max-header-count = 64
      max-chunk-ext-length = 256
      max-chunk-size = 1m
      # Default maximum content length which should not be exceeded by incoming request entities.
      # Can be changed at runtime (to a higher or lower value) via the `HttpEntity::withSizeLimit` method.
      # Note that it is not necessarily a problem to set this to a high value as all stream operations
      # are always properly backpressured.
      # Nevertheless you might want to apply some limit in order to prevent a single client from consuming
      # an excessive amount of server resources.
      #
      # Set to `infinite` to completely disable entity length checks. (Even then you can still apply one
      # programmatically via `withSizeLimit`.)
      max-content-length = 64m
      # Sets the strictness mode for parsing request target URIs.
      # The following values are defined:
      #
      # `strict`: RFC3986-compliant URIs are required,
      #     a 400 response is triggered on violations
      #
      # `relaxed`: all visible 7-Bit ASCII chars are allowed
      #
      uri-parsing-mode = strict
      # Sets the parsing mode for parsing cookies.
      # The following value are defined:
      #
      # `rfc6265`: Only RFC6265-compliant cookies are parsed. Surrounding double-quotes are accepted and
      #   automatically removed. Non-compliant cookies are silently discarded.
      # `raw`: Raw parsing allows any non-control character but ';' to appear in a cookie value. There's no further
      #   post-processing applied, so that the resulting value string may contain any number of whitespace, unicode,
      #   double quotes, or '=' characters at any position.
      #   The rules for parsing the cookie name are the same ones from RFC 6265.
      #
      cookie-parsing-mode = rfc6265
      # Enables/disables the logging of warning messages in case an incoming
      # message (request or response) contains an HTTP header which cannot be
      # parsed into its high-level model class due to incompatible syntax.
      # Note that, independently of this settings, akka-http will accept messages
      # with such headers as long as the message as a whole would still be legal
      # under the HTTP specification even without this header.
      # If a header cannot be parsed into a high-level model instance it will be
      # provided as a `RawHeader`.
      # If logging is enabled it is performed with the configured
      # `error-logging-verbosity`.
      illegal-header-warnings = on
      # Configures the verbosity with which message (request or response) parsing
      # errors are written to the application log.
      #
      # Supported settings:
      # `off`   : no log messages are produced
      # `simple`: a condensed single-line message is logged
      # `full`  : the full error details (potentially spanning several lines) are logged
      error-logging-verbosity = full
      # Configures the processing mode when encountering illegal characters in
      # header value of response.
      #
      # Supported mode:
      # `error`  : default mode, throw an ParsingException and terminate the processing
      # `warn`   : ignore the illegal characters in response header value and log a warning message
      # `ignore` : just ignore the illegal characters in response header value
      illegal-response-header-value-processing-mode = error
      # limits for the number of different values per header type that the
      # header cache will hold
      header-cache {
        default = 12
        Content-MD5 = 0
        Date = 0
        If-Match = 0
        If-Modified-Since = 0
        If-None-Match = 0
        If-Range = 0
        If-Unmodified-Since = 0
        User-Agent = 32
      }
      # Enables/disables inclusion of an Tls-Session-Info header in parsed
      # messages over Tls transports (i.e., HttpRequest on server side and
      # HttpResponse on client side).
      tls-session-info-header = off
    }
}
